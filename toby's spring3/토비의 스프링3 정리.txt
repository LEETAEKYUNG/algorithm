4장 예외
p.306
	* DAO 인터페이스와 구현의 분리
		- DAO 분리의 이유
			- 데이터 엑세스 로직을 담은 코드를 성격이 다른 코드와 분리하기 위해
			- 분리된 DAO는 전력 패턴을 적용해 구현 방법을 변경해서 사용할 수 있게 하기 위해
			- 그런 면에서 DAO는 인터페이스를 사용해 구체적인 클래스 정보와 구현 방법을 감추고 DI를 통해 제공되도록 만드는 것이 바람직.
		- 메소드 선언에 나타나는 예외정보가 기술에 독집적인 인터페이스로 만드는데 걸림돌이 된다.
			- SQLException 같은 체크 예외같은 경우 런타임 예외로 전환해서 던져주면 인터페이스의 메서드에서 예외 선언을 빼도 된다.
			- 하지만 SQLException 에서도 의미있는 예외가 있다. 또한 시스템 레벨에서 데이터 엑세스 예외를 의미있게 분류할 필요도 있다.
			- 이런 경우 RuntimeException 전환이 아닌 의미있는 예외 처리를 해야하는데 이때도 데이터 엑세스 기술에 따라 다른 종류의 예외가 던져질 수 있는 문제가 있다.
	* 데이터 엑세스 예외 추상화와 DataAccessException 계층구조
		- 스프링은 자바의 다양한 데이터 액세스 기술을 사용할 때 발새하는 예외들을 추상화해서 DataAccessException 계층구조 안에 정리해놓았다.
		- DataAccessException은 자바의 주요 데이터 액세스 기술에서 발생할 수 있는 대부분의 예외를 추상화하고 있다.
		- JdbcTemplate과 같이 스프링의 데이터 액세스 지원 기술을 이용해 DAO를 만들면 사용 기술에 독립적인 일관성 있는 예외를 던질 수 있다.

2.4 기술에 독립적인 UserDao 만들기
	* 인터페이스 적용
	* DataAccessException 활용 시 주의사항
		- 스프링은 SQLException을 DataAccessException으로 전환하는 다양한 방법을 제공.
		- 중첩된 예외는 예외 서브클래스의 getRootCause() 메서드를 이용하여 가져올 수 있다.

=========4.3 정리=============
- 복구할 수 없는 예외는 가능한 한 빨리 런타임 예외로 전환
- 애플리케이션의 로직을 담기 위한 예외는 체크 예외로 만든다.
- 스프링은 DataAccessException을 통해 DB에 독립적으로 적용 가능한 추상화된 런타임 예외 계층을 제공
- DAO를 데이터 액세스 기술에서 독립시키려면 인터페이스 도입과 런타임 예외 전환, 그리고 기술에 독립적인 추상화된 예외로의 전환이 필요하다.


5장 서비스 추상화
- 스프링이 어떻게 성격이 비슷한 여러 종류의 기술을 추상화하고 이를 일관된 방법으로 사용할 수 있도록 지원하는지 알아보자.
5.1 사용자 레벨 관리 기능 추가
	- UserDao에 비즈니스 로직을 추가해보자.
		- 정기적으로 사용자의 활동내역을 참고해서 레벨을 조정해주는 기능 추가
			- 사용자의 레벨 분류 BASIC, SILVER, GOLD
			- 처음 가입 BASIC, 이후 활동에 따라서 한 단계씩 업그레이드
			- 가입 후 50회 이상 로그인 하면 BASIC에서 SILVER로 업그레이드
			- SILVER이면 30회 이상 추천 받으면 GOLD
			- 사용자 레벨의 변경작업은 주기를 가지고 일괄작업. 변경 작업 전에 조건을 충족하더라도 레벨 변경이 일어나지 않음.
	5.1.1 필드 추가
		* Level 이늄